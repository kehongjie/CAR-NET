se <- 5 / sqrt(n) # Using Fisher Information of lambda
z <- qnorm(1 - alpha/2)
lower <- lambda_hat - z * se
upper <- lambda_hat + z * se
return(c(lower, upper))
}
lambda_samp_CI <- function(n) {
samp <- rexp(n, rate = 5)
ci <- CI_Exp_Lambda(samp)
return(mean_inside_CI(5, ci))
}
set.seed(2000)
B <- 10000
n <- 50
CI_95_lambda <- replicate(B, lambda_samp_CI(n))
mean(CI_95_lambda)
# drawing samples from Exp(1)
CI_Exp_Lambda <- function(data, alpha = 0.05){
n <- length(data)
lambda_hat <- 1 / mean(data)  # MLE for 位 in Exp(位)
se <- 1 / sqrt(n) # Using Fisher Information of lambda
z <- qnorm(1 - alpha/2)
lower <- lambda_hat - z * se
upper <- lambda_hat + z * se
return(c(lower, upper))
}
lambda_samp_CI <- function(n) {
samp <- rexp(n, rate = 1)
ci <- CI_Exp_Lambda(samp)
return(mean_inside_CI(1, ci))
}
set.seed(2000)
B <- 10000
n <- 50
CI_95_lambda <- replicate(B, lambda_samp_CI(n))
mean(CI_95_lambda)
# drawing samples from Exp(1)
CI_Exp_Lambda <- function(data, alpha = 0.05){
n <- length(data)
lambda_hat <- 1 / mean(data)  # MLE for 位 in Exp(位)
se <- 1 / sqrt(n) # Using Fisher Information of lambda
z <- qnorm(1 - alpha/2)
lower <- lambda_hat - z * se
upper <- lambda_hat + z * se
return(c(lower, upper))
}
lambda_samp_CI <- function(n) {
samp <- rexp(n, rate = 1)
ci <- CI_Exp_Lambda(samp)
return(mean_inside_CI(1, ci))
}
set.seed(2020)
B <- 10000
n <- 50
CI_95_lambda <- replicate(B, lambda_samp_CI(n))
mean(CI_95_lambda)
x_fixed <- seq(0, 10, by=0.5)
alpha <- 3
beta <- 5
sigma <- 1.6
Y <- function() {
y <- c()
for(x in x_fixed){
temp <- alpha + beta*x+rnorm(1, mean = 0,  sd = sigma)
y <- c(y, temp)
}
return(y)
}
plot_Y <- function() {
y <- Y()
print(y)
plot(x_fixed, y)
lines(x_fixed, alpha + beta*x_fixed, col='red')
}
plot_Y()
Stat420_R3.log
source("C:/Users/xiaod/Downloads/Rshiny/NGRN_Rshiny/bn_main.R")
install.packages("stats")
source("C:/Users/xiaod/Downloads/Rshiny/NGRN_Rshiny/bn_main.R")
Sys.which("make")
write('PATH="${RTOOLS40_HOME}\\usr\\bin;${rtools40}"', file = "~/.Renviron", append = TRUE)
Sys.which("make")
library(shiny); source('C:/Users/xiaod/Downloads/Rshiny/NGRN_Rshiny/RunShiny.R')
write('PATH="${RTOOLS40_HOME}\\usr\\bin;${rtools44}"', file = "~/.Renviron", append = TRUE)
Sys.which("make")
library(shiny); source('C:/Users/xiaod/Downloads/Rshiny/NGRN_Rshiny/RunShiny.R')
update.packages(checkBuilt=TRUE)
library(shiny); source('C:/Users/xiaod/Downloads/Rshiny/NGRN_Rshiny/RunShiny.R')
Sys.getenv("PATH")
Sys.which("stats.dll")
library(shiny); source('C:/Users/xiaod/Downloads/Rshiny/NGRN_Rshiny/RunShiny.R')
Sys.setenv(PATH = "C:/Program Files/R/4.4.1/bin/x64")
library(shiny); source('C:/Users/xiaod/Downloads/Rshiny/NGRN_Rshiny/RunShiny.R')
Sys.which("stats.dll")
Sys.getenv()
Sys.getenv("PATH")
library(shiny); source('C:/Users/xiaod/Downloads/Rshiny/NGRN_Rshiny/RunShiny.R')
library(stats, lib.loc = "C:/Program Files/R/R-4.4.1/library")
library(stats)
library(survival, lib.loc = "C:/Program Files/R/R-4.4.1/library")
write('PATH="${RTOOLS40_HOME}\\usr\\bin;${rtools44}"', file = "~/.Renviron", append = TRUE)
Sys.getenv("PATH")
library(shiny); source('C:/Users/xiaod/Downloads/Rshiny/NGRN_Rshiny/RunShiny.R')
library(shiny); source('C:/Users/xiaod/Downloads/Rshiny/NGRN_Rshiny/RunShiny.R')
Sys.getenv("PATH")
getwd()
library(shiny); source('C:/Users/xiaod/Downloads/Rshiny/NGRN_Rshiny/RunShiny.R')
Sys.getenv("PATH")
library(shiny); source('C:/Users/xiaod/Downloads/Rshiny/NGRN_Rshiny/RunShiny.R')
Sys.which("make")
library(shiny); source('C:/Users/xiaod/Downloads/Rshiny/NGRN_Rshiny/RunShiny.R')
library(devtools)
install_github("https://github.com/CAMO-R/Rpackage")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.19")
source('NGRN_Rshiny/RunShiny.R')
source('NGRN_Rshiny/RunShiny.R')
install.packages(KEGGREST)
install.packages("KEGGREST")
source('NGRN_Rshiny/RunShiny.R')
source('NGRN_Rshiny/RunShiny.R')
source('NGRN_Rshiny/RunShiny.R')
source('NGRN_Rshiny/RunShiny.R')
source('NGRN_Rshiny/RunShiny.R')
source('NGRN_Rshiny/RunShiny.R')
source('NGRN_Rshiny/RunShiny.R')
source('NGRN_Rshiny/RunShiny.R')
source('NGRN_Rshiny/RunShiny.R')
df <- read.csv(R"(C:\Users\xiaod\Downloads\Rshiny\NGRN_Rshiny\data\TCGA_KIRP_early_lncRNA_top5per.csv)")
View(df)
View(t(df))
df <- t(df)
colnames(df) <- df[1,]
View(df)
df <- df[-1,]
View(df)
df2 <- read.csv(R"(C:\Users\xiaod\Downloads\Rshiny\NGRN_Rshiny\data\TCGA_KIRP_early_gene_top5per.csv)")
View(df2)
View(t(df2))
View(df)
View(t(df))
runApp('NGRN_Rshiny')
runApp('NGRN_Rshiny')
plot(graph_from_adjacency_matrix(fit$adj), mode = "directed")
x <- read.csv("./data/TCGA_KIRP_early_lncRNA_top5per.csv", header=T)
source('NGRN_Rshiny/RunShiny.R')
View(df)
df <- read.csv(R"(C:\Users\xiaod\Downloads\Rshiny\NGRN_Rshiny\data\TCGA_KIRP_early_lncRNA_top5per.csv)")
colnames(df) <- df[1,]
df <- df[-1,]
View(df)
df <- read.csv(R"(C:\Users\xiaod\Downloads\Rshiny\NGRN_Rshiny\data\TCGA_KIRP_early_lncRNA_top5per.csv)")
View(df)
colnames(df) <- df[1,]
df <- read.csv(R"(C:\Users\xiaod\Downloads\Rshiny\NGRN_Rshiny\data\TCGA_KIRP_early_lncRNA_top5per.csv)")
View(df)
df<- t(df)
colnames(df) <- df[1,]
df <- df[-1,]
df <- as.data.frame(internal_filter(df, input$cutoff_ncRNA)[1], check.names = FALSE)
internal_filter = function(M, fence){
df = M
avg_df = apply(df, 2, mean)
ind = avg_df < fence
return(list(df[,!ind, drop = FALSE], ind))
}
df <- as.data.frame(internal_filter(df, input$cutoff_ncRNA)[1], check.names = FALSE)
df <- as.data.frame(internal_filter(df, 0)[1], check.names = FALSE)
warnings()
df <- read.csv(R"(C:\Users\xiaod\Downloads\Rshiny\NGRN_Rshiny\data\TCGA_KIRP_early_lncRNA_top5per.csv)")
df <- t(df)
colnames(df) <- df[1,]
df <- df[-1,]
df[,1]
df_numeric <- data.frame(lapply(df, function(x) as.numeric(as.character(x))))
df <- as.data.frame(internal_filter(df_numeric, 0)[1], check.names = FALSE)
View(df_numeric)
df <- read.csv(R"(C:\Users\xiaod\Downloads\Rshiny\NGRN_Rshiny\data\TCGA_KIRP_early_lncRNA_top5per.csv)")
df=t(df)
colnames(df) <- df[1,]
df <- df[-1,]
View(df)
df_numeric <- data.frame(lapply(df, function(x) as.numeric(as.character(x))))
?sapply(list, function)
?sapply
df_numeric <- data.frame(sapply(df, function(x) as.numeric(as.character(x))))
?apply
df_numeric <- data.frame(apply(df, function(x) as.numeric(as.character(x))))
df_numeric <- data.frame(apply(df, , FUN = function(x) as.numeric(as.character(x))))
df_numeric <- data.frame(apply(df, MARGIN = c(1,2), FUN = function(x) as.numeric(as.character(x))))
View(df_numeric)
View(df)
df2 <- as.data.frame(internal_filter(df_numeric, input$cutoff_ncRNA)[1], check.names = FALSE)
df2 <- as.data.frame(internal_filter(df_numeric, 0)[1], check.names = FALSE)
View(df2)
source('NGRN_Rshiny/RunShiny.R')
getwd()
setwd("C:/Users/xiaod/Downloads/Rshiny/NGRN_Rshiny")
x <- read.csv("./data/TCGA_KIRP_early_lncRNA_top5per.csv", header=T)
rownames(x) <- x[,1]
x <- x[,-1]
X <- t(x)
y <- read.csv("./data/TCGA_KIRP_early_gene_top5per.csv", header=T)
rownames(y) <- y[,1]
y <- y[,-1]
Y <- t(y)
load("./bn.Rdata")
plot(graph_from_adjacency_matrix(fit$adj), mode = "directed")
source('RunShiny.R')
source('NGRN_Rshiny/RunShiny.R')
?callModule
source('NGRN_Rshiny/RunShiny.R')
source('NGRN_Rshiny/RunShiny.R')
source('NGRN_Rshiny/RunShiny.R')
source('NGRN_Rshiny/RunShiny.R')
source("./gui_filter.R")
source('NGRN_Rshiny/RunShiny.R')
source('NGRN_Rshiny/RunShiny.R')
print("hello")
print(as.character("hello"))
?read.csv
df <- read.csv("C:\\Users\\xiaod\\AppData\\Local\\Temp\\RtmpOymwJJ/851be663f5fc91361cf1d58a/0.csv")
traceback()
source('NGRN_Rshiny/RunShiny.R')
source('NGRN_Rshiny/RunShiny.R')
source('NGRN_Rshiny/RunShiny.R')
df <- read.csv("./data/TCGA_KIRP_early_lncRNA_top5per.csv")
df <- read.csv(R"(C:\Users\xiaod\Downloads\Rshiny\NGRN_Rshiny\data\TCGA_KIRP_early_lncRNA_top5per.csv)")
df <- t(df)
colnames(df) <- df[1,]
df <- df[-1,]
df <- data.frame(apply(df, MARGIN = c(1,2), FUN = function(x) as.numeric(as.character(x))))
Y <- internal_filter(df, ImProxy$cutoff_gene)[1]
Y <- internal_filter(df, 3)[1]
Y
df <- read.csv(R"(C:\Users\xiaod\Downloads\Rshiny\NGRN_Rshiny\data\TCGA_KIRP_early_gene_top5per.csv)")
df <- t(df)
colnames(df) <- df[1,]
df <- df[-1,]
df <- data.frame(apply(df, MARGIN = c(1,2), FUN = function(x) as.numeric(as.character(x))))
X <- internal_filter(df, 11)[1]
fit <- bn.main(X=Y, Y=X, alpha=1e-5)
fit <- bn.main(X=Y[1], Y=X[1], alpha=1e-5)
Y[1]
fit <- bn.main(X=Y[[1]], Y=X[[1]], alpha=1e-5)
print(typeof(Y[[1]]))
Y <- as.matrix(internal_filter(df, 11)[1])
Y
Y <- as.matrix(internal_filter(df, 11)[1][[1]])
print(typeof(Y))
Y
df2 <- read.csv(R"(C:\Users\xiaod\Downloads\Rshiny\NGRN_Rshiny\data\TCGA_KIRP_early_lncRNA_top5per.csv)")
df2=t(df2)
colnames(df2)=df2[1,]
df2=df2[-1,]
df2=data.frame(apply(df2, MARGIN = c(1,2), FUN = function(x) as.numeric(as.character(x))))
X <- as.matrix(internal_filter(df, 3)[1][[1]])
fit <- bn.main(X=X, Y=Y, alpha=1e-5)
View(X)
setwd(R"(C:\Users\xiaod\Downloads\Rshiny\NGRN_Rshiny\data)")
x <- read.csv("./data/TCGA_KIRP_early_lncRNA_top5per.csv", header=T)
setwd(R"(C:\Users\xiaod\Downloads\Rshiny\NGRN_Rshiny)")
x <- read.csv("./data/TCGA_KIRP_early_lncRNA_top5per.csv", header=T)
rownames(x) <- x[,1]
x <- x[,-1]
X <- t(x)
y <- read.csv("./data/TCGA_KIRP_early_gene_top5per.csv", header=T)
rownames(y) <- y[,1]
y <- y[,-1]
Y <- t(y)
View(y)
source('RunShiny.R')
traceback
traceback()
x <- read.csv("./data/TCGA_KIRP_early_lncRNA_top5per.csv", header=T)
setwd(R"(C:\Users\xiaod\Downloads\Rshiny\NGRN_Rshiny)")
x <- read.csv("./data/TCGA_KIRP_early_lncRNA_top5per.csv", header=T)
rownames(x) <- x[,1]
x <- x[,-1]
X <- t(x)
X <- as.matrix(internal_filter(df, 3)[1][[1]])
X <- t(x)
[[1]]
X <- as.matrix(internal_filter(X, 3)[1][[1]])
y <- read.csv("./data/TCGA_KIRP_early_gene_top5per.csv", header=T)
rownames(y) <- y[,1]
y <- y[,-1]
Y <- t(y)
Y <- as.matrix(internal_filter(Y, 11)[1][[1]])
fit <- bn.main(X=X, Y=Y, alpha=1e-5)
traceback()
?cor
fit <- bn.main(X=X, Y=Y, alpha=1e-5)
typeof(Y)
Y <- t(y)
typeof(Y)
View(Y)
Y <- as.matrix(internal_filter(Y, 11)[1][[1]])
cor(Y)
fit <- bn.main(X=X, Y=Y, alpha=1e-5)
fit <- bn.main(X=X, Y=Y, alpha=1e-5)
source("C:/Users/xiaod/Downloads/Rshiny/NGRN_Rshiny/bn_main.R")
fit <- bn.main(X=X, Y=Y, alpha=1e-5)
source("C:/Users/xiaod/Downloads/Rshiny/NGRN_Rshiny/bn_main.R")
fit <- bn.main(X=X, Y=Y, alpha=1e-5)
traceback()
fit <- bn.main(X=X, Y=Y, alpha=1e-5)
source('RunShiny.R')
print(head(Y))
source('NGRN_Rshiny/RunShiny.R')
source('NGRN_Rshiny/RunShiny.R')
partition_graph_k <- function(adj_matrix, k) {
# Number of nodes
n <- nrow(adj_matrix)
# Randomly assign each node to one of the k partitions
partition <- sample(1:k, n, replace = TRUE)
# Create a list to store the adjacency matrices for the k subgraphs
subgraphs <- vector("list", k)
# Initialize each subgraph adjacency matrix as a zero matrix
for (i in 1:k) {
subgraphs[[i]] <- matrix(0, n, n)
}
# Fill the subgraph adjacency matrices based on the partition
for (i in 1:n) {
for (j in 1:n) {
if (partition[i] == partition[j]) {
subgraphs[[partition[i]]][i, j] <- adj_matrix[i, j]
}
}
}
# Return the subgraph adjacency matrices and the partition vector
return(list(subgraphs = subgraphs, partition = partition))
}
load("./bn.RData")
getwd()
setwd("./NGRN_Rshiny")
load("./bn.RData")
partition_graph_k <- function(adj_matrix, k) {
# Number of nodes
n <- nrow(adj_matrix)
# Randomly assign each node to one of the k partitions
partition <- sample(1:k, n, replace = TRUE)
# Create a list to store the adjacency matrices for the k subgraphs
subgraphs <- vector("list", k)
# Initialize each subgraph adjacency matrix as a zero matrix
for (i in 1:k) {
subgraphs[[i]] <- matrix(0, n, n)
}
# Fill the subgraph adjacency matrices based on the partition
for (i in 1:n) {
for (j in 1:n) {
if (partition[i] == partition[j]) {
subgraphs[[partition[i]]][i, j] <- adj_matrix[i, j]
}
}
}
# Return the subgraph adjacency matrices and the partition vector
return(list(subgraphs = subgraphs, partition = partition))
}
result <- partition_graph_k(fit$adj, 10)
plot(graph_from_adjacency_matrix(result$subgraphs[[1]]), mode = "directed")
result <- partition_graph_k(fit$adj, 100)
plot(graph_from_adjacency_matrix(result$subgraphs[[1]]), mode = "directed")
result <- partition_graph_k(fit$adj, 1000)
plot(graph_from_adjacency_matrix(result$subgraphs[[1]]), mode = "directed")
dim(fit$adj)
dim(result$subgraphs[[1]])
dim(result$subgraphs[[2]])
print(result$partition)
print(sort(result$partition))
partition_matrix_blocks <- function(adj_matrix, block_size) {
# Number of nodes
n <- nrow(adj_matrix)
# Calculate the number of blocks along one dimension
num_blocks <- ceiling(n / block_size)
# Create a list to store the submatrices
blocks <- vector("list", num_blocks^2)
# Initialize the index for the list
index <- 1
# Fill the submatrices
for (i in seq(1, n, by = block_size)) {
for (j in seq(1, n, by = block_size)) {
# Determine the rows and columns for the current block
row_indices <- i:min(i + block_size - 1, n)
col_indices <- j:min(j + block_size - 1, n)
# Extract the submatrix
submatrix <- adj_matrix[row_indices, col_indices]
# Store the submatrix in the list
blocks[[index]] <- submatrix
index <- index + 1
}
}
# Return the list of submatrices
return(blocks)
}
result <- partition_graph_k(fit$adj, 10)
plot(graph_from_adjacency_matrix(result[[1]]), mode = "directed")
result <- partition_graph_k(fit$adj, 47)
plot(graph_from_adjacency_matrix(result[[1]]), mode = "directed")
result <- partition_matrix_blocks(fit$adj, 47)
plot(graph_from_adjacency_matrix(result[[1]]), mode = "directed")
plot(graph_from_adjacency_matrix(result[[2]]), mode = "directed")
plot(graph_from_adjacency_matrix(result[[3]]), mode = "directed")
plot(graph_from_adjacency_matrix(result[[4]]), mode = "directed")
result <- partition_matrix_blocks(fit$adj, 235)
plot(graph_from_adjacency_matrix(result[[1]]), mode = "directed")
result <- partition_matrix_blocks(fit$adj, 94)
plot(graph_from_adjacency_matrix(result[[1]]), mode = "directed")
plot(graph_from_adjacency_matrix(result[[2]]), mode = "directed")
plot(graph_from_adjacency_matrix(result[[3]]), mode = "directed")
plot(graph_from_adjacency_matrix(result[[4]]), mode = "directed")
plot(graph_from_adjacency_matrix(result[[15]]), mode = "directed")
source('RunShiny.R')
source('RunShiny.R')
source('NGRN_Rshiny/RunShiny.R')
23/10
source('NGRN_Rshiny/RunShiny.R')
source("./single-adj_different_size.r")
getwd()
setwd("C:/Users/xiaod/Downloads/Rshiny/NGRN_Rshiny")
source("./single-adj_different_size.r")
fit <- load("./bn.RData")
load("./bn.RData")
# plot(graph_from_adjacency_matrix(result[[1]]), mode = "directed")
p <- ncol(X)
dim(fit$adj)
p=14
q=21
single_igraph(adj_single=fit$adj, prob_single=matrix(0.5, p+q, p+q),
ncRNA_num=p,
single_graph_name="test_all.jpeg") # call your visualization function
traceback()
sum(fit$adj)
plot(fit$adj)
# plot(graph_from_adjacency_matrix(result[[1]]), mode = "directed")
p <- ncol(X)
plot(graph_from_adjacency_matrix(result[[1]]), mode = "directed")
plot(graph_from_adjacency_matrix(fit$adj), mode = "directed")
single_igraph(adj_single=fit$adj, prob_single=matrix(0.5, p+q, p+q),
ncRNA_num=p,
single_graph_name="test_all.jpeg") # call your visualization function
p=20
q=40
single_igraph(adj_single=fit$adj, prob_single=matrix(0.5, p+q, p+q),
ncRNA_num=p,
single_graph_name="test_all.jpeg") # call your visualization function
graph_from_adjacency_matrix(fit$adj)
source('RunShiny.R')
source('RunShiny.R')
source('NGRN_Rshiny/RunShiny.R')
source('NGRN_Rshiny/RunShiny.R')
source('NGRN_Rshiny/RunShiny.R')
source('NGRN_Rshiny/RunShiny.R')
source('NGRN_Rshiny/RunShiny.R')
?img
source('NGRN_Rshiny/RunShiny.R')
source('NGRN_Rshiny/RunShiny.R')
source('NGRN_Rshiny/RunShiny.R')
source('NGRN_Rshiny/RunShiny.R')
source('NGRN_Rshiny/RunShiny.R')
source('NGRN_Rshiny/RunShiny.R')
# fit(bn.main(X=X, Y=Y, alpha=1e-5))
load("./bn.RData")
getwd()
setwd()
setwd("C:/Users/xiaod/Downloads/Rshiny/NGRN_Rshiny")
# fit(bn.main(X=X, Y=Y, alpha=1e-5))
load("./bn.RData")
fit
source('RunShiny.R')
source('RunShiny.R')
source('NGRN_Rshiny/RunShiny.R')
source('NGRN_Rshiny/RunShiny.R')
source('NGRN_Rshiny/RunShiny.R')
# load("./bn.RData")
adj_mat(fit$adj)
load("./bn.RData")
load("./NGRN_Rshiny/bn.RData")
source('NGRN_Rshiny/RunShiny.R')
setwd("C:/Users/xiaod/Downloads/Rshiny/NGRN_Rshiny")
load("./bn.RData")
total <- 470
single_igraph(adj_single=fit$adj, prob_single=matrix(0.5, total, total),
ncRNA_num=p,
single_graph_name="./plots/test_all.png") # call your visualization function
dev.on()
single_igraph(adj_single=fit$adj, prob_single=matrix(0.5, total, total),
ncRNA_num=p,
single_graph_name="./plots/test_all.png") # call your visualization function
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source("~/Desktop/pumyung/003Maryland/3-Research/5-lncRNA/NGRN/ui/preproc_ui.R")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
